<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />
	<resources mapping="/webjars/**" location="classpath:/META-INF/resources/webjars/" />
	<resources mapping="/upload/**" location="/upload/" />

	<!-- Tiles 설정 -->
	<beans:bean class="org.springframework.web.servlet.view.UrlBasedViewResolver" p:order="1"
		p:viewClass="org.springframework.web.servlet.view.tiles3.TilesView" />
	<!--Don't add suffix or prefix like you do with .jsp files -->
	<beans:bean id="tilesConfigurer"
		class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
		<beans:property name="definitions">
			<beans:value>/WEB-INF/tiles.xml</beans:value>
		</beans:property>
	</beans:bean>

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<!-- <beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean> -->
	
	<context:component-scan base-package="com.yedam.dailycomma" />
	<aop:aspectj-autoproxy />
	
	<!-- DataSource 설정 -->
	<!-- value="jdbc:oracle:thin:@180.71.250.243:1521:XE" />-->
	<beans:bean id="dataSourceSpied"
		class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<beans:property name="driverClassName"
			value="oracle.jdbc.OracleDriver" />
		<beans:property name="url"			
			value="jdbc:oracle:thin:@localhost:1521:XE" />
		<beans:property name="username" value="mydaily" />
		<beans:property name="password" value="mydaily" />
	</beans:bean>
	
	<!-- JDBC Log 설정 -->
	<beans:bean id="dataSource"
		class="net.sf.log4jdbc.Log4jdbcProxyDataSource">
		<beans:constructor-arg ref="dataSourceSpied" />
		<beans:property name="logFormatter">
			<beans:bean
				class="net.sf.log4jdbc.tools.Log4JdbcCustomFormatter">
				<beans:property name="loggingType" value="MULTI_LINE" />
				<beans:property name="sqlPrefix" value="SQL:::" />
			</beans:bean>
		</beans:property>
	</beans:bean>
	
	<!-- Mybatis 설정 -->
	<beans:bean id="sqlSession"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<beans:property name="dataSource" ref="dataSource" />
		<beans:property name="configLocation"
			value="classpath:sql-map-config-spring.xml" />
		<beans:property name="mapperLocations"
			value="classpath:mapper/*.xml" />
	</beans:bean>

	<beans:bean class="org.mybatis.spring.SqlSessionTemplate">
		<beans:constructor-arg ref="sqlSession"></beans:constructor-arg>
	</beans:bean>
	
	<!-- Transaction 처리 설정 -->
	<beans:bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<beans:property name="dataSource" ref="dataSource" />
	</beans:bean>

	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="get*" read-only="true" />
			<tx:method name="*" />
		</tx:attributes>
	</tx:advice>

	<!-- MultipartResolver 설정 -->
	<beans:bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<beans:property name="maxUploadSize" value="100000000" />
		<beans:property name="maxInMemorySize" value="1000000" />
		<!-- <beans:property name="uploadTempDir" value="C:/Temp" /> -->
	</beans:bean>
	
	<!-- 인터셉터 객체 생성 -->
    <beans:bean id="authenticationInterceptor" class="com.yedam.dailycomma.common.AuthenticationInterceptor">
    </beans:bean>
    <!-- Interceptor 설정 -->
    <interceptors>
        <interceptor>
            <mapping path="/myPage.do"/>
			<mapping path="/castListForm.do"/>
			<mapping path="/registerCastForm.do"/>
			<mapping path="/lodgmentList.do"/>
			<mapping path="/registerLodgmentForm.do"/>
			<mapping path="/insertRoomForm.do"/>
			<mapping path="/managementList.do"/>					
			
            <beans:ref bean="authenticationInterceptor"/>
        </interceptor>
    </interceptors>
     
<!--     <context:component-scan base-package="com.yedam.dailycomma.myPage" />
    <context:component-scan base-package="com.yedam.dailycomma.common" />
 -->

	
	<!-- interceptor 설정 -->
<!--  	<mvc:interceptors> 
		<mvc:interceptor> 
			<mvc:mapping path="/board_write"/> 
			<bean class="com.spring.interceptor.InterCeptor"/> 
		</mvc:interceptor>
	</mvc:interceptors>  -->
	
				
	<!-- 사장님회원가입 aop 설정 -->
<!-- 	<beans:bean id="before" class="com.yedam.dailycomma.lodgment.Log4jAdvice"/>
	<beans:bean id="afterthrow" class="com.yedam.dailycomma.lodgment.Log4jAdvice"/>
	<beans:bean id="after" class="com.yedam.dailycomma.lodgment.Log4jAdvice"/>

	<aop:config>
		<aop:pointcut
			expression="execution(* com.yedam.dailycomma.lodgment.*Impl.*(..))" id="allpointcut" />
		<aop:pointcut
			expression="execution(* com.yedam.dailycomma.lodgment.*Impl.get*(..))" id="getpointcut" />

		<aop:aspect ref="before">
			<aop:before method="beforeLog" pointcut-ref="allpointcut" />
		</aop:aspect>
		
		<aop:aspect ref="afterthrow">
			<aop:after-throwing method="exceptionLog" pointcut-ref="allpointcut" />
		</aop:aspect>
		
		<aop:aspect ref="after">
			<aop:after method="finallyLog" pointcut-ref="allpointcut" />
		</aop:aspect>			
	</aop:config> -->
	
</beans:beans>
